<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>vue中引入阿里巴巴矢量图</title>
      <link href="/myBlog/2020/02/04/vue%E4%B8%AD%E5%BC%95%E5%85%A5%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E7%9F%A2%E9%87%8F%E5%9B%BE/"/>
      <url>/myBlog/2020/02/04/vue%E4%B8%AD%E5%BC%95%E5%85%A5%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E7%9F%A2%E9%87%8F%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="登录阿里巴巴矢量图库"><a href="#登录阿里巴巴矢量图库" class="headerlink" title="登录阿里巴巴矢量图库"></a>登录阿里巴巴矢量图库</h1><p>  &emsp;&emsp; 矢量图库：<a href="http://www.iconfont.cn/home/index" target="_blank" rel="noopener">http://www.iconfont.cn/home/index</a><br>  <img src="1.png"></p><h1 id="创建自己的项目"><a href="#创建自己的项目" class="headerlink" title="创建自己的项目"></a>创建自己的项目</h1>  <img src="2.png">  <img src="3.png"><h1 id="按照模板填写"><a href="#按照模板填写" class="headerlink" title="按照模板填写"></a>按照模板填写</h1><p>  &emsp;&emsp; Symbol 前缀   和 Font Family  必须这样写， 因为 在vue里面 是el-icon-xxx 这样引入的，避免命名不一致。<br>  <img src="4.png"></p><h1 id="项目创建完成"><a href="#项目创建完成" class="headerlink" title="项目创建完成"></a>项目创建完成</h1>  <img src="5.png"><p>  &emsp;&emsp; 回到 矢量图图主页， 找到自己需要的图标， 加入项目。<br>&emsp;&emsp; 1：进入图标库<br>&emsp;&emsp; 2：找到自己要的图标<br>  <img src="6.png"><br>&emsp;&emsp; 3：在自己要的图标上 点击 购物车图标 加入购物车<br>&emsp;&emsp; 4:点击右上角的购物车<br>  <img src="7.png"><br>&emsp;&emsp; 5：这里会有自己选择加入的图标， 点击  添加至项目  的按钮</p>  <img src="8.png"><p>&emsp;&emsp; 6：选择刚刚创建的项目<br>  <img src="9.png"><br>&emsp;&emsp; 7： 选择  Font class<br>  <img src="10.png"><br>&emsp;&emsp;8:下载至本地<br>  <img src="11.png"><br>&emsp;&emsp;9： 下载后解压<br>&emsp;&emsp;10： 删除红色标记的四个文件<br>  <img src="12.png"><br>&emsp;&emsp;11：在vue项目的 src &gt; assets 下新建  icon文件夹， 将剩下的六个文件 放进去<br>  <img src="13.png"><br>&emsp;&emsp;12： 在 main.js 中 引入  iconfont.css 文件<br>  <img src="14.png"><br>&emsp;&emsp;13： 在页面中引入 图标， 在仓库中， 图标的名字是   el-icon-denglu, 那么在页面中 就引入这个名字就可以了。</p>  <img src="15.png">]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 矢量图 </tag>
            
            <tag> iconfont </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue 指令</title>
      <link href="/myBlog/2020/02/01/vue%E6%8C%87%E4%BB%A4/"/>
      <url>/myBlog/2020/02/01/vue%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h1><p>&emsp;&emsp;指令是指带有 v- 前缀的标签属性，以表示他们是 vue 提供的特殊特性。</p><h2 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h2><pre><code class="html">  &lt;h1 v-bind:title=&quot;msg&quot;&gt;标题&lt;h1&gt;  &lt;h1 :title=&quot;msg&quot;&gt;标题&lt;h1&gt;&lt;!-- 简写：直接在属性前写： --&gt;</code></pre><h2 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h2><p>&emsp;&emsp;j进行事件绑定<br>&emsp;&emsp;v-on:事件名=“该事件需要执行的代码”<br>&emsp;&emsp;简写：@事件名=“该事件需要执行的代码”<br>&emsp;&emsp;事件修饰符：<br>&emsp;&emsp;&emsp;&emsp;.stop：阻止冒泡<br>&emsp;&emsp;&emsp;&emsp;.prevent：阻止默认事件<br>&emsp;&emsp;&emsp;&emsp;.capture：使<br>&emsp;&emsp;&emsp;&emsp;.self：只监听直接触发该元素的事件<br>&emsp;&emsp;&emsp;&emsp;.once：只触发一次<br>&emsp;&emsp;&emsp;&emsp;.left：左键点击事件<br>&emsp;&emsp;&emsp;&emsp;.right：右键点击事件<br>&emsp;&emsp;&emsp;&emsp;.middle：中间滚轮<br><img src="1.png"></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>认识 vue</title>
      <link href="/myBlog/2020/02/01/%E8%AE%A4%E8%AF%86vue/"/>
      <url>/myBlog/2020/02/01/%E8%AE%A4%E8%AF%86vue/</url>
      
        <content type="html"><![CDATA[<h1 id="认识-Vue"><a href="#认识-Vue" class="headerlink" title="认识 Vue"></a>认识 Vue</h1><p>&emsp;&emsp;SPA（单页WEB应用）：也就是只有一个 web 页面。</p><h2 id="第一步：引入框架"><a href="#第一步：引入框架" class="headerlink" title="第一步：引入框架"></a>第一步：引入框架</h2><pre><code class="html">  &lt;script src=&quot;vue.js&quot;&gt;&lt;/script&gt;</code></pre><h2 id="第二步：使用框架"><a href="#第二步：使用框架" class="headerlink" title="第二步：使用框架"></a>第二步：使用框架</h2><pre><code class="js">new Vue({el:&quot;对象的id&quot;,data:{// 数据中心},watch：{// 用于监听属性值的变化},computed：{// 计算属性，主要是用来对原数据进行改造输出，类似于方法，，在数据变化时，会同步更新，相对于方法来讲，依赖于数据变化时，才会重新计算，而方法在每次调用时都会重新计算，所以比方法性能高},filters：{// 过滤器，对数据进行过滤处理},methods:{// 在这里定义所有函数}})</code></pre><h1 id="服务器渲染-vs-客户端渲染"><a href="#服务器渲染-vs-客户端渲染" class="headerlink" title="服务器渲染 vs 客户端渲染"></a>服务器渲染 vs 客户端渲染</h1><img src='1.png'><h1 id="前后端分离"><a href="#前后端分离" class="headerlink" title="前后端分离"></a>前后端分离</h1><p>&emsp;&emsp;（PC端、移动端 web、原生 APP）<br>&emsp;&emsp;系统分离后，同一个后端系统，只需要提供一套接口（如：“url”，POST）<br><img src='2.png'></p><h1 id="开发模式"><a href="#开发模式" class="headerlink" title="开发模式"></a>开发模式</h1><img src='3.png'>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo文章操作</title>
      <link href="/myBlog/2020/02/01/hexo%E6%96%87%E7%AB%A0%E6%93%8D%E4%BD%9C/"/>
      <url>/myBlog/2020/02/01/hexo%E6%96%87%E7%AB%A0%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h1><pre><code class="js">// 在 hexo 所在目录下，打开终端，在命令行输入hexo new a // a 是文章标题，也可以加上双引号// 正确的结果：我们会在 _posts 里看见多了一个 lin.md 文件// 因此我们也知道了，默认情况下，hexo为我们创建的是markdown文件// 而这个_posts文件夹，算是一个比较特殊的文件夹，因为它装着所有你发布出去的文章。</code></pre><p>&emsp;&emsp;打开a.md文件，我们会看到</p><pre><code class="md">---title: 1date: 2017-09-15 19:00:41tags:---文章内容写在这里</code></pre><h1 id="草稿箱"><a href="#草稿箱" class="headerlink" title="草稿箱"></a>草稿箱</h1><pre><code class="js">// 上一步我们新建出来的，叫做post page。// 除了post page，我们还可以新建draft page，也就是草稿。// 很多时候我们需要先写成草稿，而暂时不发布出去。// draft page就可以满足我们的要求，我们的网站上是看不到草稿文件的。// 在终端输入hexo new draft b // b 是文章标题// 我们会在source下看见一个新的文件夹，_drafts，这个里面会装我们所有的草稿文件// 那写好了的草稿，如何可以在不发布的情况下，预览一下文章在网站上的样子呢？hexo server --draft// 然后重启服务器</code></pre><h1 id="发布草稿"><a href="#发布草稿" class="headerlink" title="发布草稿"></a>发布草稿</h1><pre><code class="js">// 当你准备好了要发布草稿时:hexo publish b // b 是草稿文章标题// 你会发现_drafts里的b.md不见了，跑到了_posts里面,也就说明你的草稿发布成功了。 </code></pre><h1 id="给文章分类"><a href="#给文章分类" class="headerlink" title="给文章分类"></a>给文章分类</h1><h2 id="生成“分类”页并添加tpye属性"><a href="#生成“分类”页并添加tpye属性" class="headerlink" title="生成“分类”页并添加tpye属性"></a>生成“分类”页并添加tpye属性</h2><pre><code class="js">// 打开命令行，进入博客所在文件夹。执行命令hexo new page categories// 成功后会提示：INFO  Created: ~/Documents/blog/source/categories/index.md</code></pre><p>&emsp;&emsp;根据上面的路径，找到index.md这个文件，打开后默认内容是这样的：</p><pre><code class="md">---title: 文章分类date: 2017-05-27 13:47:40---</code></pre><p>&emsp;&emsp; 添加type: “categories”到内容中，添加后是这样的：</p><pre><code class="md">---title: 文章分类date: 2017-05-27 13:47:40type: &quot;categories&quot;---</code></pre><p>&emsp;&emsp;保存并关闭文件。</p><h2 id="给文章添加“categories”属性"><a href="#给文章添加“categories”属性" class="headerlink" title="给文章添加“categories”属性"></a>给文章添加“categories”属性</h2><p>  &emsp;&emsp;打开需要添加分类的文章，为其添加categories属性。下方的categories: web前端表示添加这篇文章到“web前端”这个分类。注意：hexo一篇文章只能属于一个分类，也就是说如果在“- web前端”下方添加“-xxx”，hexo不会产生两个分类，而是把分类嵌套（即该文章属于 “- web前端”下的 “-xxx ”分类）。</p><pre><code class="md">---title: jQuery对表单的操作及更多应用date: 2020-02-1 12:12:57categories: - web前端---</code></pre><h1 id="给文章加标签"><a href="#给文章加标签" class="headerlink" title="给文章加标签"></a>给文章加标签</h1><h2 id="生成“标签”页并添加tpye属性"><a href="#生成“标签”页并添加tpye属性" class="headerlink" title="生成“标签”页并添加tpye属性"></a>生成“标签”页并添加tpye属性</h2><pre><code class="js">// 打开命令行，进入博客所在文件夹。执行命令hexo new page tags// 成功后会提示：INFO  Created: ~/Documents/blog/source/tags/index.md</code></pre><p> &emsp;&emsp;根据上面的路径，找到index.md这个文件，打开后默认内容是这样的：</p><pre><code class="md">---title: 标签date: 2020-02-1 12:12:57---</code></pre><p> &emsp;&emsp;添加type: “tags”到内容中，添加后是这样的：</p><pre><code class="md"> ---title: 文章分类date: 2020-02-1 12:12:57type: &quot;tags&quot;---</code></pre><p> &emsp;&emsp;保存并关闭文件。</p><h2 id="给文章添加“tags”属性"><a href="#给文章添加“tags”属性" class="headerlink" title="给文章添加“tags”属性"></a>给文章添加“tags”属性</h2><p> &emsp;&emsp;打开需要添加标签的文章，为其添加tags属性。下方的tags:下方的- jQuery - 表格 - 表单验证就是这篇文章的标签了</p><pre><code class="md">---title: jQuery对表单的操作及更多应用date: 2020-02-1 12:12:57categories: - web前端tags:- jQuery- 表格- 表单验证---</code></pre><p> &emsp;&emsp;至此，成功给文章添加分类，点击首页的“标签”可以看到该标签下的所有文章。当然，只有添加了tags: xxx的文章才会被收录到首页的“标签”中。</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo的基础用法</title>
      <link href="/myBlog/2020/01/31/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/myBlog/2020/01/31/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h1><p>&emsp;&emsp;Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown 解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h1 id="hexo-安装"><a href="#hexo-安装" class="headerlink" title="hexo 安装"></a>hexo 安装</h1><p>&emsp;&emsp;首先确保电脑已经安装了 nodejs 和 git，如果没有安装请先安装后再执行以下操作。</p><pre><code class="nodejs">npm install hexo-cli -g # 脚手架hexo init myBlog # 创建项目，myBlog为项目名，可自定义cd myBlog # 进入目录npm install # 安装依赖</code></pre><h2 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h2><pre><code class="文件层级结构">├── _config.yml  # 网站的配置文件├── package.json # 应用程序的信息├── scaffolds # 通用的 markdown 模板├── source # 存放用户资源的地方    ├── _drafts # 草稿文件    └── _posts # 发布的文章└── themes # 博客的模板</code></pre><h1 id="使用主题"><a href="#使用主题" class="headerlink" title="使用主题"></a>使用主题</h1><p>&emsp;&emsp;hexo 有非常丰富的第三方主题，可以快速帮助我们搭建功能强大的博客网站：<br>&emsp;&emsp;<br>&emsp;&emsp;第一步、下载主题模板 <a href="https://hexo.io/themes/" target="_blank">点击这里获取主题模板；</a><br>&emsp;&emsp;第二步、将下载的模板解压到 themes 目录；<br>&emsp;&emsp;第三步、修改根目录下的 _config.yml 文件：</p><pre><code class="代码块">theme: 模板名字</code></pre><h1 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h1><p>&emsp;&emsp;在终端运行以下命令：</p><pre><code class="终端">hexo new &lt;title&gt;</code></pre><p>&emsp;&emsp;这样在根目录下的 source/_posts 目录下就会生成一个 .md 的文件了，然后就可以直接进行编辑。_或者直接在 _posts 目录下新建 markdown 文件编辑，在 _drafts 目录新建 markdown 文件，就是草稿。</p><h1 id="运行-hexo-进行预览"><a href="#运行-hexo-进行预览" class="headerlink" title="运行 hexo 进行预览"></a>运行 hexo 进行预览</h1><pre><code class="终端"># 生成静态文件并监视文件变动，可简写： hexo ghexo generate -w  hexo server // 启动服务器，可简写：hexo s# 调试模式hexo s --debug</code></pre><h1 id="hexo-配置到-github-上"><a href="#hexo-配置到-github-上" class="headerlink" title="hexo 配置到 github 上"></a>hexo 配置到 github 上</h1><h2 id="先安装-git-插件"><a href="#先安装-git-插件" class="headerlink" title="先安装 git 插件"></a>先安装 git 插件</h2><pre><code class="终端">npm install hexo-deployer-git --save</code></pre><h2 id="配置-git-，修改根目录下的-config-yml-文件"><a href="#配置-git-，修改根目录下的-config-yml-文件" class="headerlink" title="配置 git ，修改根目录下的 _config.yml 文件:"></a>配置 git ，修改根目录下的 _config.yml 文件:</h2><pre><code class="yml">deploy:  type: git  repository: https://github.com/lin-bin/myBlog.git # github仓库地址  branch: master</code></pre><h2 id="推送到-github"><a href="#推送到-github" class="headerlink" title="推送到 github"></a>推送到 github</h2><pre><code class="终端">  # 清除缓存文件（db.json）和已生成的静态文件（public）  hexo clean  # 生成静态文件  hexo generate # 简写为 hexo g  # 然后部署到 github 上  hexo deploy # 简写为：hexo d  # 或者以上两步直接替换为  hexo generate -d</code></pre><h1 id="github-配置"><a href="#github-配置" class="headerlink" title="github 配置"></a>github 配置</h1><p>&emsp;&emsp;进入 github 仓库，选择 Settings<br><img src='1.png'><br>&emsp;&emsp;设置 GitHub Pages<br><img src='2.png'></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown语法规则</title>
      <link href="/myBlog/2020/01/26/markdown%E8%AF%AD%E6%B3%95%E8%A7%84%E5%88%99/"/>
      <url>/myBlog/2020/01/26/markdown%E8%AF%AD%E6%B3%95%E8%A7%84%E5%88%99/</url>
      
        <content type="html"><![CDATA[<h1 id="markdown是什么"><a href="#markdown是什么" class="headerlink" title="markdown是什么"></a>markdown是什么</h1><p>&emsp;&emsp;Markdown是一种纯文本格式的标记语言。通过简单的标记语法，它可以使普通文本内容具有一定的格式。<br>  文档后缀为.md。</p><h1 id="分级标题"><a href="#分级标题" class="headerlink" title="分级标题"></a>分级标题</h1><p>&emsp;&emsp;在想要设置为标题的文字前面加 <kbd style='padding: 2px 8px;border: 1px solid rgba(63,63,63,.25);box-shadow: 0 1px 0 rgba(63,63,63,.25);background-color: #fff;color: #333;border-radius: 4px;display: inline-block;margin: 0 2px;white-space: nowrap;'>#</kbd> 来表示一个标题。<br>一个 <kbd style='padding: 2px 8px;border: 1px solid rgba(63,63,63,.25);box-shadow: 0 1px 0 rgba(63,63,63,.25);background-color: #fff;color: #333;border-radius: 4px;display: inline-block;margin: 0 2px;white-space: nowrap;'>#</kbd> 是一级标题，二个 <kbd style='padding: 2px 8px;border: 1px solid rgba(63,63,63,.25);box-shadow: 0 1px 0 rgba(63,63,63,.25);background-color: #fff;color: #333;border-radius: 4px;display: inline-block;margin: 0 2px;white-space: nowrap;'>#</kbd> 是二级标题，以此类推。支持六级标题。</p><p>示例</p><pre><code class="markdown">  # 一级标题  ## 二级标题  ### 三级标题  #### 四级标题  ##### 五级标题  ###### 六级标题</code></pre><h1 id="斜体和粗体"><a href="#斜体和粗体" class="headerlink" title="斜体和粗体"></a>斜体和粗体</h1><pre><code class="markdown">  *斜体*  **粗体**  ***加粗斜体***  ~~删除线~~</code></pre><p>显示效果<br>  &emsp;&emsp;<em>这是一段斜体</em><br>  &emsp;&emsp;<strong>这是一段粗体</strong><br>  &emsp;&emsp;<strong><em>这是一段加粗斜体</em></strong><br>  &emsp;&emsp;<del>这是一段删除线</del></p><h1 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h1><p>  &emsp;&emsp;Markdown 支持两种形式的链接语法：行内式和参考式两种形式，行内式一般使用较多</p><h2 id="行内式"><a href="#行内式" class="headerlink" title="行内式"></a>行内式</h2><p>  &emsp;&emsp;语法说明：<br>  &emsp;&emsp;[]里写链接文字，()里写链接地址, ()中的””中可以为链接指定title属性，title属性可加可不加。title属性的效果是鼠标悬停在链接上会出现指定的 title文字。<a href="链接地址" title="链接标题">链接文字</a>这样的形式。链接地址与链接标题前有一个空格。</p><pre><code class="markdown">  欢迎来到[林兵的博客](https://lin-bin.github.io/myBlog)  欢迎来到[林兵的博客](https://lin-bin.github.io/myBlog &quot;林兵的博客&quot;)</code></pre><p>显示效果</p><p>  &emsp;&emsp;欢迎来到<a href="https://lin-bin.github.io/myBlog">林兵的博客</a></p><p>  &emsp;&emsp;注：Markdown本身语法不支持链接在新页面中打开，貌似简书做了处理，是可以的。别的平台可能就不行了，如果想要在新页面中打开的话可以用html语言的a标签代替。</p><pre><code class="html">&lt;a href=&quot;超链接地址&quot; target=&quot;_blank&quot;&gt;超链接名&lt;/a&gt;</code></pre><p>示例<br>&emsp;&emsp;<a href="https://lin-bin.github.io/myBlog" target="_blank">在新的标签页打开林兵的博客</a></p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p>  &emsp;&emsp;在在引用的文字前加&gt;即可。引用也可以嵌套，如加两个 &gt;&gt; 三个 &gt;&gt;&gt; n个…</p><pre><code class="markdown">    &gt;这是引用的内容    &gt;&gt;这是引用的内容    &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容 </code></pre><p>效果如下：</p><blockquote><p>这是引用的内容</p><blockquote><p>这是引用的内容</p><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>这是引用的内容 </p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><h1 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h1><p>  &emsp;&emsp;三个或者三个以上的 - 或者 * 都可以</p><p>  示例：</p><pre><code class="markdown">    ---    ----    ***    *****</code></pre><p>  效果如下:<br>&emsp;&emsp;可以看到，显示效果是一样的</p><hr><hr><hr><hr><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><p>  语法：</p><pre><code class="markdown">![图片alt](图片地址 &#39;&#39;图片title&#39;&#39;)图片alt就是显示在图片下面的文字，相当于对图片内容的解释。图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</code></pre><p>  示例：<br><img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=702257389,1274025419&fm=27&gp=0.jpg" alt="blockchain" title="区块链"></p><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><p>&emsp;&emsp;语法：<br>&emsp;&emsp;&emsp;&emsp;无序列表用 - + * 任何一种都可以</p><pre><code class="markdown">- 列表内容+ 列表内容* 列表内容</code></pre><p>&emsp;&emsp;效果如下：</p><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><p>&emsp;&emsp;语法：<br>&emsp;&emsp;&emsp;&emsp;数字加点</p><pre><code class="markdown">1.列表内容2.列表内容3.列表内容注意：序号跟内容之间要有空格</code></pre><p>&emsp;&emsp;效果如下：</p><ol><li>列表内容</li><li>列表内容</li><li>列表内容</li></ol><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><p>&emsp;&emsp;语法：</p><pre><code class="markdown">表头|表头|表头---|:--:|---:内容|内容|内容内容|内容|内容第二行分割表头和内容。- 有一个就行，为了对齐，多加了几个文字默认居左-两边加：表示文字居中-右边加：表示文字居右注：原生的语法两边都要用 | 包起来。此处省略</code></pre><p>&emsp;&emsp;示例：</p><table><thead><tr><th>姓名</th><th align="center">技能</th><th align="right">排行</th></tr></thead><tbody><tr><td>刘备</td><td align="center">哭</td><td align="right">大哥</td></tr><tr><td>关羽</td><td align="center">打</td><td align="right">二哥</td></tr><tr><td>张飞</td><td align="center">骂</td><td align="right">三弟</td></tr></tbody></table><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>&emsp;&emsp;语法：<br>单行代码：代码之间分别用一个反引号包起来</p><pre><code class="markdown">`代码内容`</code></pre><p>代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行</p><pre><code class="markdown">(```)  代码...  代码...  代码...(```)</code></pre><p>&emsp;&emsp;注：为了防止转译，前后三个反引号处加了小括号，实际是没有的。这里只是用来演示，实际中去掉两边小括号即可。</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
