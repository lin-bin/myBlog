<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>浏览器兼容问题</title>
      <link href="/myBlog/2020/02/07/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98/"/>
      <url>/myBlog/2020/02/07/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>常见的兼容性问题：</p><h1 id="不同浏览器的标签默认的外边距-margin-和内边距-padding-不同"><a href="#不同浏览器的标签默认的外边距-margin-和内边距-padding-不同" class="headerlink" title="不同浏览器的标签默认的外边距 margin 和内边距 padding 不同"></a>不同浏览器的标签默认的外边距 <code>margin</code> 和内边距 <code>padding</code> 不同</h1><p>&emsp;&emsp;解决方案： css 里增加通配符 <code>* { margin: 0; padding: 0; }</code></p><h1 id="IE6双边距问题；在-IE6中设置了-float-同时又设置-margin-就会出现边距问题"><a href="#IE6双边距问题；在-IE6中设置了-float-同时又设置-margin-就会出现边距问题" class="headerlink" title="IE6双边距问题；在 IE6中设置了 float , 同时又设置 margin , 就会出现边距问题"></a>IE6双边距问题；在 IE6中设置了 <code>float</code> , 同时又设置 <code>margin</code> , 就会出现边距问题</h1><p>&emsp;&emsp;解决方案：设置 <code>display:inline</code> ;</p><h1 id="当标签的高度设置小于10px，在IE6、IE7中会超出自己设置的高度"><a href="#当标签的高度设置小于10px，在IE6、IE7中会超出自己设置的高度" class="headerlink" title="当标签的高度设置小于10px，在IE6、IE7中会超出自己设置的高度"></a>当标签的高度设置小于10px，在IE6、IE7中会超出自己设置的高度</h1><p>&emsp;&emsp;解决方案：超出高度的标签设置 <code>overflow:hidden</code>,或者设置 <code>line-height</code> 的值小于你的设置高度</p><h1 id="图片默认有间距"><a href="#图片默认有间距" class="headerlink" title="图片默认有间距"></a>图片默认有间距</h1><p>&emsp;&emsp;解决方案：使用 <code>float</code> 为 img 布局</p><h1 id="IE9一下浏览器不能使用opacity"><a href="#IE9一下浏览器不能使用opacity" class="headerlink" title="IE9一下浏览器不能使用opacity"></a>IE9一下浏览器不能使用opacity</h1><p>&emsp;&emsp;解决方案：<code>opacity: 0.5;filter: alpha(opacity = 50);filter: progid:DXImageTransform.Microsoft.Alpha(style = 0, opacity = 50);</code></p><h1 id="边距重叠问题；当相邻两个元素都设置了margin-边距时，margin-将取最大值，舍弃最小值；"><a href="#边距重叠问题；当相邻两个元素都设置了margin-边距时，margin-将取最大值，舍弃最小值；" class="headerlink" title="边距重叠问题；当相邻两个元素都设置了margin 边距时，margin 将取最大值，舍弃最小值；"></a>边距重叠问题；当相邻两个元素都设置了margin 边距时，margin 将取最大值，舍弃最小值；</h1><p>&emsp;&emsp;解决方案：为了不让边重叠，可以给子元素增加一个父级元素，并设置父级元素为 <code>overflow:hidden；</code></p><h1 id="cursor-hand-显示手型在safari-上不支持"><a href="#cursor-hand-显示手型在safari-上不支持" class="headerlink" title="cursor:hand 显示手型在safari 上不支持"></a>cursor:hand 显示手型在safari 上不支持</h1><p>&emsp;&emsp;解决方案：统一使用 <code>cursor:pointer</code></p><h1 id="两个块级元素，父元素设置了overflow-auto；子元素设置了position-relative-且高度大于父元素，在IE6、IE7会被隐藏而不是溢出；"><a href="#两个块级元素，父元素设置了overflow-auto；子元素设置了position-relative-且高度大于父元素，在IE6、IE7会被隐藏而不是溢出；" class="headerlink" title="两个块级元素，父元素设置了overflow:auto；子元素设置了position:relative ;且高度大于父元素，在IE6、IE7会被隐藏而不是溢出；"></a>两个块级元素，父元素设置了overflow:auto；子元素设置了position:relative ;且高度大于父元素，在IE6、IE7会被隐藏而不是溢出；</h1><p>&emsp;&emsp;解决方案：父级元素设置 <code>position:relative</code></p><h1 id="IE6下图片下有空隙产生"><a href="#IE6下图片下有空隙产生" class="headerlink" title="IE6下图片下有空隙产生"></a>IE6下图片下有空隙产生</h1><p>&emsp;&emsp;解决方案：可以是改变 <code>html</code> 的排版,或者设置 <code>img为display:block</code> 或者设置 <code>vertical-align</code> 属性为 <code>vertical-align:top/bottom/middle/text-bottom</code> 都可以解决.</p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浏览器 </tag>
            
            <tag> web前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js函数中的this关键字</title>
      <link href="/myBlog/2020/02/05/js%E5%87%BD%E6%95%B0%E4%B8%AD%E7%9A%84this%E5%85%B3%E9%94%AE%E5%AD%97/"/>
      <url>/myBlog/2020/02/05/js%E5%87%BD%E6%95%B0%E4%B8%AD%E7%9A%84this%E5%85%B3%E9%94%AE%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<h1 id="js-函数调用-this-的场合"><a href="#js-函数调用-this-的场合" class="headerlink" title="js 函数调用 this 的场合"></a>js 函数调用 this 的场合</h1><p>&emsp;&emsp;1、很常规的调用(即直接调用，其实你发现也是全局调用)<br>&emsp;&emsp;2、作为某个对象的方法被调用<br>&emsp;&emsp;3、作为构造函数，用来新建某个对象<br>&emsp;&emsp;4、很让人头大的 apply 调用 (在实现部分继承的时候经常这么干。)</p><h1 id="纯粹的函数调用"><a href="#纯粹的函数调用" class="headerlink" title="纯粹的函数调用"></a>纯粹的函数调用</h1><p>&emsp;&emsp;这是函数的最通常用法，属于全局性调用，因此 this 就代表全局对象 Global(在浏览器中全局对象为 window)。</p><p>&emsp;&emsp;看下面这段代码：</p><pre><code class="js">function test() {    this.name = &#39;linbing&#39;;    console.log(this.name);}test() // linbing</code></pre><p>&emsp;&emsp;在函数里调用 <code>this.name=&#39;linbing&#39;</code>，此时 <code>this</code> 在浏览器中就是 <code>window</code> 对象</p><pre><code class="js">window.name // linbing</code></pre><h1 id="作为对象方法调用"><a href="#作为对象方法调用" class="headerlink" title="作为对象方法调用"></a>作为对象方法调用</h1><p>&emsp;&emsp;函数还可以作为某个对象的方法调用，这时 this 就指这个上级对象,也来看一段代码：</p><pre><code class="js">function test(){    console.log(&quot;my name is &quot; + this.name + &quot; and y profession is &quot; + this.profession);}var person = { };person.name = &#39;linbing&#39;;person.profession = &#39;projector&#39;;person.interduce = test;person.interduce();  // my name is linbing and y profession is projector</code></pre><p>&emsp;&emsp;这里很好理解，即然是 person 在调用 test 函数，那么理所应当的 this 指向的是 person 实体，也就是说前面说的调用函数的上一级对象，它的 name 和 perfession 属性当然应该被读取出来了。</p><p>&emsp;&emsp;上面的代码可以简写为</p><pre><code class="js">var person = {    name: &#39;linbing&#39;,    profession: &#39;projector&#39;,    interduce: function(){    console.log(&quot;my name is &quot; + this.name + &quot; and y profession is &quot; + this.profession);    }person.interduce();  // my name is linbing and y profession is projector</code></pre><h1 id="作为构造函数调用"><a href="#作为构造函数调用" class="headerlink" title="作为构造函数调用"></a>作为构造函数调用</h1><p>&emsp;&emsp;所谓构造函数，就是通过这个函数生成一个新对象(object)。这时，this就指这个新对象，也来看一段代码：</p><pre><code class="js">function Person() {    this.name = &#39;linbing&#39;;}var person = new Person();console.log(person.name) // linbing</code></pre><p>&emsp;&emsp;可以看出来，this 指向的对象是刚刚新建的 person</p><h1 id="apply-调用"><a href="#apply-调用" class="headerlink" title="apply 调用"></a>apply 调用</h1><p>&emsp;&emsp;apply()是函数对象的一个方法，它的作用是改变函数 this 的指向，它的第一个参数就表示 this 要指向的对象。</p><pre><code class="js">function person(){    console.log(this.name, this.age);}var obj = {name: &#39;linbing&#39;, age: 1}person.apply(obj) // 将函数内部的 this 指向 obj, 输出 linbing 1 </code></pre><p>&emsp;&emsp;关于这个 apply，可能大多数人不太喜欢用它，要想调用某个对象直接调用不就好了么？但是应该想到，假如你想调用别人写好的某个方法，某些参数变量却要用到你自己的，怎么办？apply 和 call 就派上用场了，这也是 js 面向对象思维转换的重要一环</p><h1 id="借来的-this"><a href="#借来的-this" class="headerlink" title="借来的 this"></a>借来的 this</h1><p>&emsp;&emsp;可以借助一些手法手动修改 this 的指向</p><pre><code class="js">&gt;&gt; fn.call（对象，参数1，参数2...）：将函数的上下文环境切换到另一个对象中注意：该函数会立即执行执行一次临时性的&gt;&gt; fn.apply（对象，[参数1，参数2...]）用法同 call，只是传参方式不一样&gt;&gt; fn.bind（对象）被动修改 this 的指向，一般用于修改回调函数的 this 指向&gt;&gt; call、apply、bind 的区别：相同点：都是用于改变函数中 this 的指向不同点：call、apply 都是立即执行（主动），用于一般函数bind 是被动执行，通常用于回调函数call 直接将参数列举在对象的后面apply 是以数组的形式传递参数</code></pre>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github</title>
      <link href="/myBlog/2020/02/04/Github/"/>
      <url>/myBlog/2020/02/04/Github/</url>
      
        <content type="html"><![CDATA[<h1 id="在-windows-上安装"><a href="#在-windows-上安装" class="headerlink" title="在 windows 上安装"></a>在 windows 上安装</h1><p>&emsp;&emsp;直接官网下载:<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">https://git-scm.com/download/win</a></p><h1 id="Git-配置"><a href="#Git-配置" class="headerlink" title="Git 配置"></a>Git 配置</h1><p>&emsp;&emsp;Git 自带一个 git config 的工具来帮助设置控制 Git 外观和行为的配置变量。 这些变量存储在三个不同的位置：</p><p>&emsp;&emsp;1、 /etc/gitconfig 文件: 包含系统上每一个用户及他们仓库的通用配置。 如果使用带有 –system 选项的 git config 时，它会从此文件读写配置变量。</p><p>&emsp;&emsp;2、 ~/.gitconfig 或 ~/.config/git/config 文件：只针对当前用户。 可以传递 –global 选项让 Git 读写此文件。</p><p>&emsp;&emsp;3、 当前使用仓库的 Git 目录中的 config 文件（就是 .git/config）：针对该仓库。每一个级别覆盖上一级别的配置，所以 .git/config 的配置变量会覆盖 /etc/gitconfig 中的配置变量。</p><h1 id="配置用户名与邮箱"><a href="#配置用户名与邮箱" class="headerlink" title="配置用户名与邮箱"></a>配置用户名与邮箱</h1><p>&emsp;&emsp;当安装完 Git 应该做的第一件事就是设置你的用户名称与邮件地址。 这样做很重要，因为每一个 Git 的提交都会使用这些信息，并且它会写入到你的每一次提交中，不可更改：</p><pre><code class="js"># 如果想设置为全局生效，添加 --global 参数git config [--global] user.name &quot;你的用户名&quot;git config [--global] user.email &quot;你的邮箱&quot;</code></pre><p>&emsp;&emsp;当你想针对特定项目使用不同的用户名称与邮件地址时，可以在那个项目目录下运行没有 –global 选项的命令来配置。</p><h1 id="检查配置信息"><a href="#检查配置信息" class="headerlink" title="检查配置信息"></a>检查配置信息</h1><pre><code class="js"># 显示当前的 Git 配置git config --list​# 编辑 Git 配置文件git config -e [--global]</code></pre><h1 id="获取帮助"><a href="#获取帮助" class="headerlink" title="获取帮助"></a>获取帮助</h1><p>&emsp;&emsp;若你使用 Git 时需要获取帮助，有三种方法可以找到 Git 命令的使用手册：</p><pre><code class="js">git help &lt;cmd&gt;git &lt;cmd&gt; --helpman git-&lt;cmd&gt;</code></pre><h1 id="生成本地仓库"><a href="#生成本地仓库" class="headerlink" title="生成本地仓库"></a>生成本地仓库</h1><h2 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h2><p>&emsp;&emsp;如果是一个新的项目，则通过以下命令来初始化仓库：</p><pre><code class="js"># 进入项目cd &lt;project-name&gt;​# 初始化git init​## 也可以直接创建新项目并初始化git init &lt;project-name&gt;</code></pre><p>&emsp;&emsp;该命令将在项目根目录下创建一个名为 .git 的子目录（默认隐藏的），这个子目录含有你初始化的 Git 仓库中所有的必须文件，切勿改动删除该目录。</p><h2 id="克隆现有的仓库"><a href="#克隆现有的仓库" class="headerlink" title="克隆现有的仓库"></a>克隆现有的仓库</h2><p>&emsp;&emsp;如果你想获得一份已经存在了的 Git 仓库的拷贝，比如说，从 github 上下载一个项目，这时就要用到 git clone 命令。</p><pre><code class="js">git clone https://github.com/lin-bin</code></pre><p>&emsp;&emsp;这会在当前目录下创建一个名为 “lin-bin” 的目录，并在这个目录下初始化一个 .git 文件夹，从远程仓库拉取下所有数据放入 .git 文件夹，然后从中读取最新版本的文件的拷贝。</p><h1 id="文件跟踪"><a href="#文件跟踪" class="headerlink" title="文件跟踪"></a>文件跟踪</h1><h2 id="提交到暂存区"><a href="#提交到暂存区" class="headerlink" title="提交到暂存区"></a>提交到暂存区</h2><pre><code class="js">git add &lt;filename&gt; &lt;filename&gt;​# 添加指定类型文件到暂存区git add *.html​# 添加指定目录到暂存区git add [dir]​# 提交所有变更（包括新提交(new)和被修改(modified)文件，但不包括被删除(deleted)文件））git add .​# 添加已经被 add 且存在更改的文件（提交被修改(modified)和被删除(deleted)文件，不包括新文件(new)）git add -u​# 添加所有变化（包括新提交(new)、被修改(modified)以及被删除(deleted)文件）git add --allgit add -A # 简写​# 对于同一个文件的多处变化在提交之前进行确认，可以实现分次提交git add -p</code></pre><p>&emsp;&emsp;<font color=red>注意：运行了 git add 之后又修改了该文件，需要重新运行 git add 把最新版本重新暂存起来。</font></p><h2 id="提交到仓库"><a href="#提交到仓库" class="headerlink" title="提交到仓库"></a>提交到仓库</h2><p>&emsp;&emsp;那么该文件此时此刻的版本将被留存在历史记录中。 在此之前，请一定要确认还有什么修改过的或新建的文件还没有 git add 过，否则提交的时候不会记录这些还没暂存起来的变化。 这些修改过的文件只保留在本地磁盘。 所以，每次准备提交前，先用 git status 看下，是不是都已暂存起来了， 然后再运行提交命令 git commit：</p><pre><code class="js">git commit -m &#39;本次提交的说明&#39;​# 提交暂存区的指定文件到仓库区git commit &lt;filename1&gt; &lt;filename2&gt; ... -m &#39;本次提交的说明&#39;​# 提交时显示所有的 diff 信息git commit -v​# 使用新的 commit 替代上一次提交，如果代码没有任何变化，则用来改写上一次 commit 的提交信息git commit --amend -m &#39;需要更新的说明&#39;</code></pre><p>&emsp;&emsp;Git 提供了一个跳过使用暂存区域的方式， 只要在提交的时候，给 git commit 加上 -a 选项，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 git add 步骤：</p><h1 id="github注册、创建仓库、管理仓库"><a href="#github注册、创建仓库、管理仓库" class="headerlink" title="github注册、创建仓库、管理仓库"></a>github注册、创建仓库、管理仓库</h1><p>&emsp;&emsp;1、 首先需要生成密钥，打开终端输入以下：</p><pre><code class="js"># 生成密钥，一路回车，不需要设置文件名和密码,方便以后的每次连接ssh-keygen -t rsa -C &quot;你的github用户名&quot;# -t 指定密钥类型，默认是 rsa ，可以省略。# -C 设置注释文字，比如邮箱；# -f 指定密钥文件存储文件名，上面命令省略了​# 查看密钥文件夹    ls -al ~/.ssh</code></pre><p>&emsp;&emsp;密钥默认存放路径 ~/.ssh/ 路径下，可以看到生成了两个密钥文件，后缀为 .pub 的就是公钥文件，另一个没有后缀的就是私钥文件。<br>&emsp;&emsp;2、复制公钥文件中的内容；<br>&emsp;&emsp;3、然后回到 Github, 点击右上角头像的下拉按钮，选择 Settings；<br>&emsp;&emsp;4、在 Settings 页面中选择左边菜单里的 SSH and GPG keys，然后点击右上角的 New SSH key 按钮，填写 Title 和 Key，然后点击 Add SSH key 按钮提交。</p><pre><code class="js"># 验证是否成功ssh -T git@github.com</code></pre><h2 id="克隆仓库"><a href="#克隆仓库" class="headerlink" title="克隆仓库"></a>克隆仓库</h2><p>&emsp;&emsp;远程仓库中，点击 Clone or download 按钮，然后点击复制链接按钮，默认是是使用 https 协议，也可以在复制链接之前点击 Use SSH ，选择使用 SSH 协议。</p><pre><code class="js">#git clone &quot;你复制的仓库链接&quot;git clone git@github.com:lin-bin/myBlog.git</code></pre><h2 id="项目中具体克隆和推送"><a href="#项目中具体克隆和推送" class="headerlink" title="项目中具体克隆和推送"></a>项目中具体克隆和推送</h2><pre><code class="js">// 1、初始化项目// 用vs code 打开一个文件目录，用于存放项目文件，在此目录下打开终端，输入命令：git init// 2、关联远程仓库git remote add origin &quot;仓库地址&quot;// 3、同步仓库到本地git pull --rebase origin master// 4、首次推送内容（此之前先提交所有修改）git push -u origin master// 5、之后推送更新内容git push origin master</code></pre>]]></content>
      
      
      <categories>
          
          <category> Github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue中引入阿里巴巴矢量图</title>
      <link href="/myBlog/2020/02/04/vue%E4%B8%AD%E5%BC%95%E5%85%A5%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E7%9F%A2%E9%87%8F%E5%9B%BE/"/>
      <url>/myBlog/2020/02/04/vue%E4%B8%AD%E5%BC%95%E5%85%A5%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E7%9F%A2%E9%87%8F%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="登录阿里巴巴矢量图库"><a href="#登录阿里巴巴矢量图库" class="headerlink" title="登录阿里巴巴矢量图库"></a>登录阿里巴巴矢量图库</h1><p>  &emsp;&emsp; 矢量图库：<a href="http://www.iconfont.cn/home/index" target="_blank" rel="noopener">http://www.iconfont.cn/home/index</a><br>  <img src="1.png"></p><h1 id="创建自己的项目"><a href="#创建自己的项目" class="headerlink" title="创建自己的项目"></a>创建自己的项目</h1>  <img src="2.png">  <img src="3.png"><h1 id="按照模板填写"><a href="#按照模板填写" class="headerlink" title="按照模板填写"></a>按照模板填写</h1><p>  &emsp;&emsp; Symbol 前缀   和 Font Family  必须这样写， 因为 在vue里面 是el-icon-xxx 这样引入的，避免命名不一致。<br>  <img src="4.png"></p><h1 id="项目创建完成"><a href="#项目创建完成" class="headerlink" title="项目创建完成"></a>项目创建完成</h1>  <img src="5.png"><p>  &emsp;&emsp; 回到 矢量图图主页， 找到自己需要的图标， 加入项目。<br>&emsp;&emsp; 1：进入图标库<br>&emsp;&emsp; 2：找到自己要的图标<br>  <img src="6.png"><br>&emsp;&emsp; 3：在自己要的图标上 点击 购物车图标 加入购物车<br>&emsp;&emsp; 4:点击右上角的购物车<br>  <img src="7.png"><br>&emsp;&emsp; 5：这里会有自己选择加入的图标， 点击  添加至项目  的按钮</p>  <img src="8.png"><p>&emsp;&emsp; 6：选择刚刚创建的项目<br>  <img src="9.png"><br>&emsp;&emsp; 7： 选择  Font class<br>  <img src="10.png"><br>&emsp;&emsp;8:下载至本地<br>  <img src="11.png"><br>&emsp;&emsp;9： 下载后解压<br>&emsp;&emsp;10： 删除红色标记的四个文件<br>  <img src="12.png"><br>&emsp;&emsp;11：在vue项目的 src &gt; assets 下新建  icon文件夹， 将剩下的六个文件 放进去<br>  <img src="13.png"><br>&emsp;&emsp;12： 在 main.js 中 引入  iconfont.css 文件<br>  <img src="14.png"><br>&emsp;&emsp;13： 在页面中引入 图标， 在仓库中， 图标的名字是   el-icon-denglu, 那么在页面中 就引入这个名字就可以了。</p>  <img src="15.png">]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 矢量图 </tag>
            
            <tag> iconfont </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue 指令</title>
      <link href="/myBlog/2020/02/01/vue%E6%8C%87%E4%BB%A4/"/>
      <url>/myBlog/2020/02/01/vue%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h1><p>&emsp;&emsp;指令是指带有 v- 前缀的标签属性，以表示他们是 vue 提供的特殊特性。</p><h2 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h2><pre><code class="html">  &lt;h1 v-bind:title=&quot;msg&quot;&gt;标题&lt;h1&gt;  &lt;h1 :title=&quot;msg&quot;&gt;标题&lt;h1&gt;&lt;!-- 简写：直接在属性前写： --&gt;</code></pre><h2 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h2><p>&emsp;&emsp;j进行事件绑定<br>&emsp;&emsp;v-on:事件名=“该事件需要执行的代码”<br>&emsp;&emsp;简写：@事件名=“该事件需要执行的代码”<br>&emsp;&emsp;事件修饰符：<br>&emsp;&emsp;&emsp;&emsp;.stop：阻止冒泡<br>&emsp;&emsp;&emsp;&emsp;.prevent：阻止默认事件<br>&emsp;&emsp;&emsp;&emsp;.capture：使<br>&emsp;&emsp;&emsp;&emsp;.self：只监听直接触发该元素的事件<br>&emsp;&emsp;&emsp;&emsp;.once：只触发一次<br>&emsp;&emsp;&emsp;&emsp;.left：左键点击事件<br>&emsp;&emsp;&emsp;&emsp;.right：右键点击事件<br>&emsp;&emsp;&emsp;&emsp;.middle：中间滚轮<br><img src="1.png"></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>认识 vue</title>
      <link href="/myBlog/2020/02/01/%E8%AE%A4%E8%AF%86vue/"/>
      <url>/myBlog/2020/02/01/%E8%AE%A4%E8%AF%86vue/</url>
      
        <content type="html"><![CDATA[<h1 id="认识-Vue"><a href="#认识-Vue" class="headerlink" title="认识 Vue"></a>认识 Vue</h1><p>&emsp;&emsp;SPA（单页WEB应用）：也就是只有一个 web 页面。</p><h2 id="第一步：引入框架"><a href="#第一步：引入框架" class="headerlink" title="第一步：引入框架"></a>第一步：引入框架</h2><pre><code class="html">  &lt;script src=&quot;vue.js&quot;&gt;&lt;/script&gt;</code></pre><h2 id="第二步：使用框架"><a href="#第二步：使用框架" class="headerlink" title="第二步：使用框架"></a>第二步：使用框架</h2><pre><code class="js">new Vue({el:&quot;对象的id&quot;,data:{// 数据中心},watch：{// 用于监听属性值的变化},computed：{// 计算属性，主要是用来对原数据进行改造输出，类似于方法，，在数据变化时，会同步更新，相对于方法来讲，依赖于数据变化时，才会重新计算，而方法在每次调用时都会重新计算，所以比方法性能高},filters：{// 过滤器，对数据进行过滤处理},methods:{// 在这里定义所有函数}})</code></pre><h1 id="服务器渲染-vs-客户端渲染"><a href="#服务器渲染-vs-客户端渲染" class="headerlink" title="服务器渲染 vs 客户端渲染"></a>服务器渲染 vs 客户端渲染</h1><img src='1.png'><h1 id="前后端分离"><a href="#前后端分离" class="headerlink" title="前后端分离"></a>前后端分离</h1><p>&emsp;&emsp;（PC端、移动端 web、原生 APP）<br>&emsp;&emsp;系统分离后，同一个后端系统，只需要提供一套接口（如：“url”，POST）<br><img src='2.png'></p><h1 id="开发模式"><a href="#开发模式" class="headerlink" title="开发模式"></a>开发模式</h1><img src='3.png'>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo文章操作</title>
      <link href="/myBlog/2020/02/01/hexo%E6%96%87%E7%AB%A0%E6%93%8D%E4%BD%9C/"/>
      <url>/myBlog/2020/02/01/hexo%E6%96%87%E7%AB%A0%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h1><pre><code class="js">// 在 hexo 所在目录下，打开终端，在命令行输入hexo new a // a 是文章标题，也可以加上双引号// 正确的结果：我们会在 _posts 里看见多了一个 lin.md 文件// 因此我们也知道了，默认情况下，hexo为我们创建的是markdown文件// 而这个_posts文件夹，算是一个比较特殊的文件夹，因为它装着所有你发布出去的文章。</code></pre><p>&emsp;&emsp;打开a.md文件，我们会看到</p><pre><code class="md">---title: 1date: 2017-09-15 19:00:41tags:---文章内容写在这里</code></pre><h1 id="草稿箱"><a href="#草稿箱" class="headerlink" title="草稿箱"></a>草稿箱</h1><pre><code class="js">// 上一步我们新建出来的，叫做post page。// 除了post page，我们还可以新建draft page，也就是草稿。// 很多时候我们需要先写成草稿，而暂时不发布出去。// draft page就可以满足我们的要求，我们的网站上是看不到草稿文件的。// 在终端输入hexo new draft b // b 是文章标题// 我们会在source下看见一个新的文件夹，_drafts，这个里面会装我们所有的草稿文件// 那写好了的草稿，如何可以在不发布的情况下，预览一下文章在网站上的样子呢？hexo server --draft// 然后重启服务器</code></pre><h1 id="发布草稿"><a href="#发布草稿" class="headerlink" title="发布草稿"></a>发布草稿</h1><pre><code class="js">// 当你准备好了要发布草稿时:hexo publish b // b 是草稿文章标题// 你会发现_drafts里的b.md不见了，跑到了_posts里面,也就说明你的草稿发布成功了。 </code></pre><h1 id="给文章分类"><a href="#给文章分类" class="headerlink" title="给文章分类"></a>给文章分类</h1><h2 id="生成“分类”页并添加tpye属性"><a href="#生成“分类”页并添加tpye属性" class="headerlink" title="生成“分类”页并添加tpye属性"></a>生成“分类”页并添加tpye属性</h2><pre><code class="js">// 打开命令行，进入博客所在文件夹。执行命令hexo new page categories// 成功后会提示：INFO  Created: ~/Documents/blog/source/categories/index.md</code></pre><p>&emsp;&emsp;根据上面的路径，找到index.md这个文件，打开后默认内容是这样的：</p><pre><code class="md">---title: 文章分类date: 2017-05-27 13:47:40---</code></pre><p>&emsp;&emsp; 添加type: “categories”到内容中，添加后是这样的：</p><pre><code class="md">---title: 文章分类date: 2017-05-27 13:47:40type: &quot;categories&quot;---</code></pre><p>&emsp;&emsp;保存并关闭文件。</p><h2 id="给文章添加“categories”属性"><a href="#给文章添加“categories”属性" class="headerlink" title="给文章添加“categories”属性"></a>给文章添加“categories”属性</h2><p>  &emsp;&emsp;打开需要添加分类的文章，为其添加categories属性。下方的categories: web前端表示添加这篇文章到“web前端”这个分类。注意：hexo一篇文章只能属于一个分类，也就是说如果在“- web前端”下方添加“-xxx”，hexo不会产生两个分类，而是把分类嵌套（即该文章属于 “- web前端”下的 “-xxx ”分类）。</p><pre><code class="md">---title: jQuery对表单的操作及更多应用date: 2020-02-1 12:12:57categories: - web前端---</code></pre><h1 id="给文章加标签"><a href="#给文章加标签" class="headerlink" title="给文章加标签"></a>给文章加标签</h1><h2 id="生成“标签”页并添加tpye属性"><a href="#生成“标签”页并添加tpye属性" class="headerlink" title="生成“标签”页并添加tpye属性"></a>生成“标签”页并添加tpye属性</h2><pre><code class="js">// 打开命令行，进入博客所在文件夹。执行命令hexo new page tags// 成功后会提示：INFO  Created: ~/Documents/blog/source/tags/index.md</code></pre><p> &emsp;&emsp;根据上面的路径，找到index.md这个文件，打开后默认内容是这样的：</p><pre><code class="md">---title: 标签date: 2020-02-1 12:12:57---</code></pre><p> &emsp;&emsp;添加type: “tags”到内容中，添加后是这样的：</p><pre><code class="md"> ---title: 文章分类date: 2020-02-1 12:12:57type: &quot;tags&quot;---</code></pre><p> &emsp;&emsp;保存并关闭文件。</p><h2 id="给文章添加“tags”属性"><a href="#给文章添加“tags”属性" class="headerlink" title="给文章添加“tags”属性"></a>给文章添加“tags”属性</h2><p> &emsp;&emsp;打开需要添加标签的文章，为其添加tags属性。下方的tags:下方的- jQuery - 表格 - 表单验证就是这篇文章的标签了</p><pre><code class="md">---title: jQuery对表单的操作及更多应用date: 2020-02-1 12:12:57categories: - web前端tags:- jQuery- 表格- 表单验证---</code></pre><p> &emsp;&emsp;至此，成功给文章添加分类，点击首页的“标签”可以看到该标签下的所有文章。当然，只有添加了tags: xxx的文章才会被收录到首页的“标签”中。</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo的基础用法</title>
      <link href="/myBlog/2020/01/31/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/myBlog/2020/01/31/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h1><p>&emsp;&emsp;Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown 解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h1 id="hexo-安装"><a href="#hexo-安装" class="headerlink" title="hexo 安装"></a>hexo 安装</h1><p>&emsp;&emsp;首先确保电脑已经安装了 nodejs 和 git，如果没有安装请先安装后再执行以下操作。</p><pre><code class="nodejs">npm install hexo-cli -g # 脚手架hexo init myBlog # 创建项目，myBlog为项目名，可自定义cd myBlog # 进入目录npm install # 安装依赖</code></pre><h2 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h2><pre><code class="文件层级结构">├── _config.yml  # 网站的配置文件├── package.json # 应用程序的信息├── scaffolds # 通用的 markdown 模板├── source # 存放用户资源的地方    ├── _drafts # 草稿文件    └── _posts # 发布的文章└── themes # 博客的模板</code></pre><h1 id="使用主题"><a href="#使用主题" class="headerlink" title="使用主题"></a>使用主题</h1><p>&emsp;&emsp;hexo 有非常丰富的第三方主题，可以快速帮助我们搭建功能强大的博客网站：<br>&emsp;&emsp;<br>&emsp;&emsp;第一步、下载主题模板 <a href="https://hexo.io/themes/" target="_blank">点击这里获取主题模板；</a><br>&emsp;&emsp;第二步、将下载的模板解压到 themes 目录；<br>&emsp;&emsp;第三步、修改根目录下的 _config.yml 文件：</p><pre><code class="代码块">theme: 模板名字</code></pre><h1 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h1><p>&emsp;&emsp;在终端运行以下命令：</p><pre><code class="终端">hexo new &lt;title&gt;</code></pre><p>&emsp;&emsp;这样在根目录下的 source/_posts 目录下就会生成一个 .md 的文件了，然后就可以直接进行编辑。_或者直接在 _posts 目录下新建 markdown 文件编辑，在 _drafts 目录新建 markdown 文件，就是草稿。</p><h1 id="运行-hexo-进行预览"><a href="#运行-hexo-进行预览" class="headerlink" title="运行 hexo 进行预览"></a>运行 hexo 进行预览</h1><pre><code class="终端"># 生成静态文件并监视文件变动，可简写： hexo ghexo generate -w  hexo server // 启动服务器，可简写：hexo s# 调试模式hexo s --debug</code></pre><h1 id="hexo-配置到-github-上"><a href="#hexo-配置到-github-上" class="headerlink" title="hexo 配置到 github 上"></a>hexo 配置到 github 上</h1><h2 id="先安装-git-插件"><a href="#先安装-git-插件" class="headerlink" title="先安装 git 插件"></a>先安装 git 插件</h2><pre><code class="终端">npm install hexo-deployer-git --save</code></pre><h2 id="配置-git-，修改根目录下的-config-yml-文件"><a href="#配置-git-，修改根目录下的-config-yml-文件" class="headerlink" title="配置 git ，修改根目录下的 _config.yml 文件:"></a>配置 git ，修改根目录下的 _config.yml 文件:</h2><pre><code class="yml">deploy:  type: git  repository: https://github.com/lin-bin/myBlog.git # github仓库地址  branch: master</code></pre><h2 id="推送到-github"><a href="#推送到-github" class="headerlink" title="推送到 github"></a>推送到 github</h2><pre><code class="终端">  # 清除缓存文件（db.json）和已生成的静态文件（public）  hexo clean  # 生成静态文件  hexo generate # 简写为 hexo g  # 然后部署到 github 上  hexo deploy # 简写为：hexo d  # 或者以上两步直接替换为  hexo generate -d</code></pre><h1 id="github-配置"><a href="#github-配置" class="headerlink" title="github 配置"></a>github 配置</h1><p>&emsp;&emsp;进入 github 仓库，选择 Settings<br><img src='1.png'><br>&emsp;&emsp;设置 GitHub Pages<br><img src='2.png'></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown语法规则</title>
      <link href="/myBlog/2020/01/26/markdown%E8%AF%AD%E6%B3%95%E8%A7%84%E5%88%99/"/>
      <url>/myBlog/2020/01/26/markdown%E8%AF%AD%E6%B3%95%E8%A7%84%E5%88%99/</url>
      
        <content type="html"><![CDATA[<h1 id="markdown是什么"><a href="#markdown是什么" class="headerlink" title="markdown是什么"></a>markdown是什么</h1><p>&emsp;&emsp;Markdown是一种纯文本格式的标记语言。通过简单的标记语法，它可以使普通文本内容具有一定的格式。<br>  文档后缀为.md。</p><h1 id="分级标题"><a href="#分级标题" class="headerlink" title="分级标题"></a>分级标题</h1><p>&emsp;&emsp;在想要设置为标题的文字前面加 <kbd style='padding: 2px 8px;border: 1px solid rgba(63,63,63,.25);box-shadow: 0 1px 0 rgba(63,63,63,.25);background-color: #fff;color: #333;border-radius: 4px;display: inline-block;margin: 0 2px;white-space: nowrap;'>#</kbd> 来表示一个标题。<br>一个 <kbd style='padding: 2px 8px;border: 1px solid rgba(63,63,63,.25);box-shadow: 0 1px 0 rgba(63,63,63,.25);background-color: #fff;color: #333;border-radius: 4px;display: inline-block;margin: 0 2px;white-space: nowrap;'>#</kbd> 是一级标题，二个 <kbd style='padding: 2px 8px;border: 1px solid rgba(63,63,63,.25);box-shadow: 0 1px 0 rgba(63,63,63,.25);background-color: #fff;color: #333;border-radius: 4px;display: inline-block;margin: 0 2px;white-space: nowrap;'>#</kbd> 是二级标题，以此类推。支持六级标题。</p><p>示例</p><pre><code class="markdown">  # 一级标题  ## 二级标题  ### 三级标题  #### 四级标题  ##### 五级标题  ###### 六级标题</code></pre><h1 id="斜体和粗体"><a href="#斜体和粗体" class="headerlink" title="斜体和粗体"></a>斜体和粗体</h1><pre><code class="markdown">  *斜体*  **粗体**  ***加粗斜体***  ~~删除线~~</code></pre><p>显示效果<br>  &emsp;&emsp;<em>这是一段斜体</em><br>  &emsp;&emsp;<strong>这是一段粗体</strong><br>  &emsp;&emsp;<strong><em>这是一段加粗斜体</em></strong><br>  &emsp;&emsp;<del>这是一段删除线</del></p><h1 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h1><p>  &emsp;&emsp;Markdown 支持两种形式的链接语法：行内式和参考式两种形式，行内式一般使用较多</p><h2 id="行内式"><a href="#行内式" class="headerlink" title="行内式"></a>行内式</h2><p>  &emsp;&emsp;语法说明：<br>  &emsp;&emsp;[]里写链接文字，()里写链接地址, ()中的””中可以为链接指定title属性，title属性可加可不加。title属性的效果是鼠标悬停在链接上会出现指定的 title文字。<a href="链接地址" title="链接标题">链接文字</a>这样的形式。链接地址与链接标题前有一个空格。</p><pre><code class="markdown">  欢迎来到[林兵的博客](https://lin-bin.github.io/myBlog)  欢迎来到[林兵的博客](https://lin-bin.github.io/myBlog &quot;林兵的博客&quot;)</code></pre><p>显示效果</p><p>  &emsp;&emsp;欢迎来到<a href="https://lin-bin.github.io/myBlog">林兵的博客</a></p><p>  &emsp;&emsp;注：Markdown本身语法不支持链接在新页面中打开，貌似简书做了处理，是可以的。别的平台可能就不行了，如果想要在新页面中打开的话可以用html语言的a标签代替。</p><pre><code class="html">&lt;a href=&quot;超链接地址&quot; target=&quot;_blank&quot;&gt;超链接名&lt;/a&gt;</code></pre><p>示例<br>&emsp;&emsp;<a href="https://lin-bin.github.io/myBlog" target="_blank">在新的标签页打开林兵的博客</a></p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p>  &emsp;&emsp;在在引用的文字前加&gt;即可。引用也可以嵌套，如加两个 &gt;&gt; 三个 &gt;&gt;&gt; n个…</p><pre><code class="markdown">    &gt;这是引用的内容    &gt;&gt;这是引用的内容    &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容 </code></pre><p>效果如下：</p><blockquote><p>这是引用的内容</p><blockquote><p>这是引用的内容</p><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>这是引用的内容 </p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><h1 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h1><p>  &emsp;&emsp;三个或者三个以上的 - 或者 * 都可以</p><p>  示例：</p><pre><code class="markdown">    ---    ----    ***    *****</code></pre><p>  效果如下:<br>&emsp;&emsp;可以看到，显示效果是一样的</p><hr><hr><hr><hr><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><p>  语法：</p><pre><code class="markdown">![图片alt](图片地址 &#39;&#39;图片title&#39;&#39;)图片alt就是显示在图片下面的文字，相当于对图片内容的解释。图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</code></pre><p>  示例：<br><img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=702257389,1274025419&fm=27&gp=0.jpg" alt="blockchain" title="区块链"></p><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><p>&emsp;&emsp;语法：<br>&emsp;&emsp;&emsp;&emsp;无序列表用 - + * 任何一种都可以</p><pre><code class="markdown">- 列表内容+ 列表内容* 列表内容</code></pre><p>&emsp;&emsp;效果如下：</p><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><p>&emsp;&emsp;语法：<br>&emsp;&emsp;&emsp;&emsp;数字加点</p><pre><code class="markdown">1.列表内容2.列表内容3.列表内容注意：序号跟内容之间要有空格</code></pre><p>&emsp;&emsp;效果如下：</p><ol><li>列表内容</li><li>列表内容</li><li>列表内容</li></ol><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><p>&emsp;&emsp;语法：</p><pre><code class="markdown">表头|表头|表头---|:--:|---:内容|内容|内容内容|内容|内容第二行分割表头和内容。- 有一个就行，为了对齐，多加了几个文字默认居左-两边加：表示文字居中-右边加：表示文字居右注：原生的语法两边都要用 | 包起来。此处省略</code></pre><p>&emsp;&emsp;示例：</p><table><thead><tr><th>姓名</th><th align="center">技能</th><th align="right">排行</th></tr></thead><tbody><tr><td>刘备</td><td align="center">哭</td><td align="right">大哥</td></tr><tr><td>关羽</td><td align="center">打</td><td align="right">二哥</td></tr><tr><td>张飞</td><td align="center">骂</td><td align="right">三弟</td></tr></tbody></table><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>&emsp;&emsp;语法：<br>单行代码：代码之间分别用一个反引号包起来</p><pre><code class="markdown">`代码内容`</code></pre><p>代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行</p><pre><code class="markdown">(```)  代码...  代码...  代码...(```)</code></pre><p>&emsp;&emsp;注：为了防止转译，前后三个反引号处加了小括号，实际是没有的。这里只是用来演示，实际中去掉两边小括号即可。</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
