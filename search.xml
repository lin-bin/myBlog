<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hexo给文章分类</title>
      <link href="/myBlog/2020/02/01/hexo%E7%BB%99%E6%96%87%E7%AB%A0%E5%88%86%E7%B1%BB/"/>
      <url>/myBlog/2020/02/01/hexo%E7%BB%99%E6%96%87%E7%AB%A0%E5%88%86%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p><img src="/myBlog/.io//2.png" alt="GitHub Pages"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo的基础用法</title>
      <link href="/myBlog/2020/01/31/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/myBlog/2020/01/31/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h1><p>&emsp;&emsp;Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown 解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h1 id="hexo-安装"><a href="#hexo-安装" class="headerlink" title="hexo 安装"></a>hexo 安装</h1><p>&emsp;&emsp;首先确保电脑已经安装了 nodejs 和 git，如果没有安装请先安装后再执行以下操作。</p><pre><code class="nodejs">npm install hexo-cli -g # 脚手架hexo init myBlog # 创建项目，myBlog为项目名，可自定义cd myBlog # 进入目录npm install # 安装依赖</code></pre><h2 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h2><pre><code class="文件层级结构">├── _config.yml  # 网站的配置文件├── package.json # 应用程序的信息├── scaffolds # 通用的 markdown 模板├── source # 存放用户资源的地方    ├── _drafts # 草稿文件    └── _posts # 发布的文章└── themes # 博客的模板</code></pre><h1 id="使用主题"><a href="#使用主题" class="headerlink" title="使用主题"></a>使用主题</h1><p>&emsp;&emsp;hexo 有非常丰富的第三方主题，可以快速帮助我们搭建功能强大的博客网站：<br>&emsp;&emsp;<br>&emsp;&emsp;第一步、下载主题模板 <a href="https://hexo.io/themes/" target="_blank">点击这里获取主题模板；</a><br>&emsp;&emsp;第二步、将下载的模板解压到 themes 目录；<br>&emsp;&emsp;第三步、修改根目录下的 _config.yml 文件：</p><pre><code class="代码块">theme: 模板名字</code></pre><h1 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h1><p>&emsp;&emsp;在终端运行以下命令：</p><pre><code class="终端">hexo new &lt;title&gt;</code></pre><p>&emsp;&emsp;这样在根目录下的 source/_posts 目录下就会生成一个 .md 的文件了，然后就可以直接进行编辑。_或者直接在 _posts 目录下新建 markdown 文件编辑，在 _drafts 目录新建 markdown 文件，就是草稿。</p><h1 id="运行-hexo-进行预览"><a href="#运行-hexo-进行预览" class="headerlink" title="运行 hexo 进行预览"></a>运行 hexo 进行预览</h1><pre><code class="终端"># 生成静态文件并监视文件变动，可简写： hexo ghexo generate -w  hexo server // 启动服务器，可简写：hexo s# 调试模式hexo s --debug</code></pre><h1 id="hexo-配置到-github-上"><a href="#hexo-配置到-github-上" class="headerlink" title="hexo 配置到 github 上"></a>hexo 配置到 github 上</h1><h2 id="先安装-git-插件"><a href="#先安装-git-插件" class="headerlink" title="先安装 git 插件"></a>先安装 git 插件</h2><pre><code class="终端">npm install hexo-deployer-git --save</code></pre><h2 id="配置-git-，修改根目录下的-config-yml-文件"><a href="#配置-git-，修改根目录下的-config-yml-文件" class="headerlink" title="配置 git ，修改根目录下的 _config.yml 文件:"></a>配置 git ，修改根目录下的 _config.yml 文件:</h2><pre><code class="yml">deploy:  type: git  repository: https://github.com/lin-bin/myBlog.git # github仓库地址  branch: master</code></pre><h2 id="推送到-github"><a href="#推送到-github" class="headerlink" title="推送到 github"></a>推送到 github</h2><pre><code class="终端">  # 清除缓存文件（db.json）和已生成的静态文件（public）  hexo clean  # 生成静态文件  hexo generate # 简写为 hexo g  # 然后部署到 github 上  hexo deploy # 简写为：hexo d  # 或者以上两步直接替换为  hexo generate -d</code></pre><h1 id="github-配置"><a href="#github-配置" class="headerlink" title="github 配置"></a>github 配置</h1><p>&emsp;&emsp;进入 github 仓库，选择 Settings，设置 GitHub Pages<br><img src="/myBlog/.io//1.png" alt="Settings"><br><img src="/myBlog/.io//2.png" alt="GitHub Pages"></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown语法规则</title>
      <link href="/myBlog/2020/01/26/markdown%E8%AF%AD%E6%B3%95%E8%A7%84%E5%88%99/"/>
      <url>/myBlog/2020/01/26/markdown%E8%AF%AD%E6%B3%95%E8%A7%84%E5%88%99/</url>
      
        <content type="html"><![CDATA[<h1 id="markdown是什么"><a href="#markdown是什么" class="headerlink" title="markdown是什么"></a>markdown是什么</h1><p>&emsp;&emsp;Markdown是一种纯文本格式的标记语言。通过简单的标记语法，它可以使普通文本内容具有一定的格式。<br>  文档后缀为.md。</p><h1 id="分级标题"><a href="#分级标题" class="headerlink" title="分级标题"></a>分级标题</h1><p>&emsp;&emsp;在想要设置为标题的文字前面加 <kbd style="padding: 2px 8px;border: 1px solid rgba(63,63,63,.25);box-shadow: 0 1px 0 rgba(63,63,63,.25);background-color: #fff;color: #333;border-radius: 4px;display: inline-block;margin: 0 2px;white-space: nowrap;">#</kbd> 来表示一个标题。<br>一个 <kbd style="padding: 2px 8px;border: 1px solid rgba(63,63,63,.25);box-shadow: 0 1px 0 rgba(63,63,63,.25);background-color: #fff;color: #333;border-radius: 4px;display: inline-block;margin: 0 2px;white-space: nowrap;">#</kbd> 是一级标题，二个 <kbd style="padding: 2px 8px;border: 1px solid rgba(63,63,63,.25);box-shadow: 0 1px 0 rgba(63,63,63,.25);background-color: #fff;color: #333;border-radius: 4px;display: inline-block;margin: 0 2px;white-space: nowrap;">#</kbd> 是二级标题，以此类推。支持六级标题。</p><p>示例</p><pre><code class="markdown">  # 一级标题  ## 二级标题  ### 三级标题  #### 四级标题  ##### 五级标题  ###### 六级标题</code></pre><h1 id="斜体和粗体"><a href="#斜体和粗体" class="headerlink" title="斜体和粗体"></a>斜体和粗体</h1><pre><code class="markdown">  *斜体*  **粗体**  ***加粗斜体***  ~~删除线~~</code></pre><p>显示效果<br>  &emsp;&emsp;<em>这是一段斜体</em><br>  &emsp;&emsp;<strong>这是一段粗体</strong><br>  &emsp;&emsp;<strong><em>这是一段加粗斜体</em></strong><br>  &emsp;&emsp;<del>这是一段删除线</del></p><h1 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h1><p>  &emsp;&emsp;Markdown 支持两种形式的链接语法：行内式和参考式两种形式，行内式一般使用较多</p><h2 id="行内式"><a href="#行内式" class="headerlink" title="行内式"></a>行内式</h2><p>  &emsp;&emsp;语法说明：<br>  &emsp;&emsp;[]里写链接文字，()里写链接地址, ()中的””中可以为链接指定title属性，title属性可加可不加。title属性的效果是鼠标悬停在链接上会出现指定的 title文字。<a href="链接地址" title="链接标题">链接文字</a>这样的形式。链接地址与链接标题前有一个空格。</p><pre><code class="markdown">  欢迎来到[林兵的博客](https://lin-bin.github.io/myBlog)  欢迎来到[林兵的博客](https://lin-bin.github.io/myBlog &quot;林兵的博客&quot;)</code></pre><p>显示效果</p><p>  &emsp;&emsp;欢迎来到<a href="https://lin-bin.github.io/myBlog">林兵的博客</a></p><p>  &emsp;&emsp;注：Markdown本身语法不支持链接在新页面中打开，貌似简书做了处理，是可以的。别的平台可能就不行了，如果想要在新页面中打开的话可以用html语言的a标签代替。</p><pre><code class="html">&lt;a href=&quot;超链接地址&quot; target=&quot;_blank&quot;&gt;超链接名&lt;/a&gt;</code></pre><p>示例<br>&emsp;&emsp;<a href="https://lin-bin.github.io/myBlog" target="_blank">在新的标签页打开林兵的博客</a></p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p>  &emsp;&emsp;在在引用的文字前加&gt;即可。引用也可以嵌套，如加两个 &gt;&gt; 三个 &gt;&gt;&gt; n个…</p><pre><code class="markdown">    &gt;这是引用的内容    &gt;&gt;这是引用的内容    &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容 </code></pre><p>效果如下：</p><blockquote><p>这是引用的内容</p><blockquote><p>这是引用的内容</p><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>这是引用的内容 </p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><h1 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h1><p>  &emsp;&emsp;三个或者三个以上的 - 或者 * 都可以</p><p>  示例：</p><pre><code class="markdown">    ---    ----    ***    *****</code></pre><p>  效果如下:<br>&emsp;&emsp;可以看到，显示效果是一样的</p><hr><hr><hr><hr><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><p>  语法：</p><pre><code class="markdown">![图片alt](图片地址 &#39;&#39;图片title&#39;&#39;)图片alt就是显示在图片下面的文字，相当于对图片内容的解释。图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</code></pre><p>  示例：<br><img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=702257389,1274025419&fm=27&gp=0.jpg" alt="blockchain" title="区块链"></p><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><p>&emsp;&emsp;语法：<br>&emsp;&emsp;&emsp;&emsp;无序列表用 - + * 任何一种都可以</p><pre><code class="markdown">- 列表内容+ 列表内容* 列表内容</code></pre><p>&emsp;&emsp;效果如下：</p><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><p>&emsp;&emsp;语法：<br>&emsp;&emsp;&emsp;&emsp;数字加点</p><pre><code class="markdown">1.列表内容2.列表内容3.列表内容注意：序号跟内容之间要有空格</code></pre><p>&emsp;&emsp;效果如下：</p><ol><li>列表内容</li><li>列表内容</li><li>列表内容</li></ol><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><p>&emsp;&emsp;语法：</p><pre><code class="markdown">表头|表头|表头---|:--:|---:内容|内容|内容内容|内容|内容第二行分割表头和内容。- 有一个就行，为了对齐，多加了几个文字默认居左-两边加：表示文字居中-右边加：表示文字居右注：原生的语法两边都要用 | 包起来。此处省略</code></pre><p>&emsp;&emsp;示例：</p><table><thead><tr><th>姓名</th><th align="center">技能</th><th align="right">排行</th></tr></thead><tbody><tr><td>刘备</td><td align="center">哭</td><td align="right">大哥</td></tr><tr><td>关羽</td><td align="center">打</td><td align="right">二哥</td></tr><tr><td>张飞</td><td align="center">骂</td><td align="right">三弟</td></tr></tbody></table><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>&emsp;&emsp;语法：<br>单行代码：代码之间分别用一个反引号包起来</p><pre><code class="markdown">`代码内容`</code></pre><p>代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行</p><pre><code class="markdown">(```)  代码...  代码...  代码...(```)</code></pre><p>&emsp;&emsp;注：为了防止转译，前后三个反引号处加了小括号，实际是没有的。这里只是用来演示，实际中去掉两边小括号即可。</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
